{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StickerItem","item","key","Col","lg","md","sm","Card","style","height","className","Img","variant","src","_source","thumb","Body","Title","name","Subtitle","description","href","slug","target","Button","App","useState","data","setData","stickers","setStickers","useEffect","getData","a","axios","get","response","success","records","JSON","parse","result","err","console","log","error","Container","fluid","length","Form","onSubmit","e","preventDefault","searchTxt","elements","value","filteredData","filter","toLowerCase","indexOf","Control","id","type","placeholder","aria-label","Row","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0VAgFA,IAAMA,EAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,IAAR,OAClB,kBAACC,EAAA,EAAD,CAAKD,IAAKA,EAAKE,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAC9B,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,OAAQ,SAAWC,UAAU,YAC1C,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAKZ,EAAKa,QAAQC,QAC1C,kBAACR,EAAA,EAAKS,KAAN,CAAWN,UAAU,aACrB,kBAACH,EAAA,EAAKU,MAAN,KAAahB,EAAKa,QAAQI,MAC1B,kBAACX,EAAA,EAAKY,SAAN,CAAeT,UAAU,mBAAmBT,EAAKa,QAAQM,cAEzD,uBAAGV,UAAU,YAAYW,KAAI,0CAAqCpB,EAAKa,QAAQQ,MAAQC,OAAO,SAAS,kBAACC,EAAA,EAAD,CAAQZ,QAAQ,QAAhB,iBAK9Fa,EAvFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,KAKbC,qBAAU,WAERC,MACC,IAGH,IAAMA,EAAO,uCAAG,8BAAAC,EAAA,4DAC6E,GAD7E,kBAGWC,IAAMC,IAAc,qBAH/B,OAKZ,IAFMC,EAHM,QAKAT,KAAKU,QACf,IACMC,EAAUC,KAAKC,MAAMJ,EAAST,KAAKc,QAAQd,KAE/CG,EAAYQ,GACZV,EAAQU,GACR,MAAMI,GACNC,QAAQC,IAAI,MAAOF,QAGrBC,QAAQC,IAAI,mBAfF,gDAkBZD,QAAQE,MAAR,MAlBY,yDAAH,qDAoCb,OACE,yBAAKnC,UAAU,OACb,kBAACoC,EAAA,EAAD,CAAWC,OAAK,GACO,IAApBlB,EAASmB,OACR,yBAAKtC,UAAU,oBAAf,eAEF,yBAAKA,UAAU,WACb,kBAACuC,EAAA,EAAD,CAAMvC,UAAU,4BAA4BwC,SArB/B,SAACC,GACpBA,EAAEC,iBACF,IAAIC,EAAYF,EAAE5B,OAAO+B,SAAS,GAAGC,MAErC,IAAmB,MAAdF,EAAL,CAKA,IAAIG,EAAe7B,EAAK8B,QAAO,SAAAxD,GAAI,OAA0E,IAAtEA,EAAKa,QAAQI,KAAKwC,cAAcC,QAAQN,EAAUK,kBAEzF9B,EAAQ4B,QANN5B,EAAQC,KAiBF,kBAACoB,EAAA,EAAKW,QAAN,CAAcC,GAAG,SAASC,KAAK,SAASC,YAAY,sBAAsBC,aAAW,WACrF,kBAACxC,EAAA,EAAD,CAAQsC,KAAK,SAASpD,UAAU,qBAAhC,WAEF,kBAACuD,EAAA,EAAD,CAAKvD,UAAU,OAEbiB,EAAKuC,KAAI,SAACjE,EAAMkE,GACd,OACE,kBAAC,EAAD,CAAajE,IAAKiE,EAAOlE,KAAMA,YCxD3BmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLF,QAAQE,MAAMA,EAAMwC,c","file":"static/js/main.2168e369.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Card, Button, Form } from 'react-bootstrap';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [stickers, setStickers] = useState([]);\n\n  useEffect(()=>{\n    // API call\n    getData();\n  }, []);\n\n  // Demonstrating async/await \n  const getData = async () => {\n    let baseUrl = process.env.REACT_APP_NODE_ENV === 'DEVELOPMENT' ? 'http://localhost:9001' : ''\n    try {\n      const response = await axios.get(baseUrl + '/chatsticker-data');\n      \n      if(response.data.success) {\n        try{\n          let records = JSON.parse(response.data.result).data;\n          \n          setStickers(records)\n          setData(records)\n        } catch(err) {\n          console.log(\"err\", err)\n        }\n      } else {\n        console.log(\"No record found\")\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    let searchTxt = e.target.elements[0].value\n\n    if(!!searchTxt === false) {\n      setData(stickers)\n      return\n    }\n\n    let filteredData = data.filter(item => item._source.name.toLowerCase().indexOf(searchTxt.toLowerCase()) !== -1)\n\n    setData(filteredData)\n  }\n\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        {stickers.length === 0 ?\n          <div className=\"text-center mt-4\">Loading....</div>\n        :\n        <div className=\"wrapper\">\n          <Form className=\"form-inline my-2 srch-box\" onSubmit={handleSearch}>\n            <Form.Control id=\"search\" type=\"search\" placeholder=\"Type here to search\" aria-label=\"Search\" />\n            <Button type=\"submit\" className=\"searchSubBtn ml-2\">Search</Button>\n          </Form>\n          <Row className=\"p-4\">\n          {\n            data.map((item, index) => {\n              return(\n                <StickerItem key={index} item={item} />\n              )\n            })\n          }\n          </Row>\n        </div>  \n        }\n      </Container>  \n    </div>\n  );\n}\n\nconst StickerItem = ({item, key}) => (\n  <Col key={key} lg=\"3\" md=\"4\" sm=\"2\">\n    <Card style={{ height: '30rem' }} className=\"p-3 mb-4\">\n      <Card.Img variant=\"top\" src={item._source.thumb} />\n      <Card.Body className=\"pl-0 pr-0\">\n      <Card.Title>{item._source.name}</Card.Title>\n      <Card.Subtitle className=\"mb-2 text-muted\">{item._source.description}</Card.Subtitle>  \n      </Card.Body>\n      <a className=\"more-info\" href={`https://chatsticker.com/sticker/${item._source.slug}`} target=\"blank\" ><Button variant=\"info\">More Info</Button></a>\n    </Card>\n  </Col>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}